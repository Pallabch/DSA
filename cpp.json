{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"boilerplate": {
		"prefix": "boilerplate",
		"body": [
			"#include <iostream>",
			"#include <vector>",
			"#include <utility>",
			"#include <algorithm>",
			"#include <unordered_map>",
			"using namespace std;",
			"typedef long long ll;",
			"typedef long double ld;",
			"typedef pair<int,int> p32;",
			"typedef pair<ll,ll> p64;",
			"typedef pair<double,double> pdd;",
			"typedef vector<ll> v64;",
			"typedef vector<int> v32;",
			"typedef vector<vector<int> > vv32;",
			"typedef vector<vector<ll> > vv64;",
			"typedef vector<vector<p64> > vvp64;",
			"typedef vector<p64> vp64;",
			"typedef vector<p32> vp32;",
			"#define forn(i,e) for(ll i = 0; i < e; i++)",
			"#define forsn(i,s,e) for(ll i = s; i < e; i++)",
			"#define rforn(i,s) for(ll i = s; i >= 0; i--)",
			"#define rforsn(i,s,e) for(ll i = s; i >= e; i--)",
			"#define ln \"\\n\"",
			"#define dbg(x) cout<<#x<<\" = \"<<x<<ln",
			"#define mp make_pair",
			"#define pb push_back",
			"#define fi first",
			"#define se second",
			"#define all(x) (x).begin(), (x).end()",
			"#define sz(x) ((ll)(x).size())",
			"static int my_speed_up = []() { ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0; }();",
			"int main()",
			"{",
			"\t$1",
			"\treturn 0;",
			"}"
		],
		"description": "boilerplate"
	}
}